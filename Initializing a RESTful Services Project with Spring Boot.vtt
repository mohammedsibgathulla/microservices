WEBVTT

00:01.470 --> 00:09.100
Welcome to this step where we would set up a project using spring initialiser. We’d want to build our RESTful

00:09.140 --> 00:16.340
web services. What we’ll do is, we’ll use start dot spring dot io to initialize

00:16.350 --> 00:20.880
our spring project. We would want to generate a Maven project because Maven is the build tool

00:20.900  --> 00:28.280
that we're going to use. Language is Java and we would want to use a Spring Boot version greater than 2.0.0

00:28.350 --> 00:32.130
So, select anything which is greater than 2.0.0 snapshot.

00:32.250 --> 00:33.390
You should be fine.

00:33.450 --> 00:35.950
The other things we want to specify is the group Id.

00:36.090 --> 00:38.400
I would want to use the group Id com in28minutes 

00:38.430 --> 00:46.230
rest web services and I would put an artifact restful web services. For any Maven project we’d

00:46.290 --> 00:49.410
need to give a group Id and an artifact Id.

00:49.920 --> 00:56.230
You can kind of compare this like a class name and package.

00:56.360 --> 00:59.330
We would also want to add a few dependencies.

00:59.370 --> 01:02.920
The way you can select the dependencies is by typing them in.

01:02.940 --> 01:08.560
So, I would want to select a web. That’s this spring boot start web dependency.

01:08.640 --> 01:11.270
We're going to build RESTFul web services.

01:11.490 --> 01:17.580
And if you remember the things from our starter projects, you'd remember that spring boot starter web is

01:17.690 --> 01:20.930
the starter for developing restful Web services.

01:21.090 --> 01:24.510
It is also the starter for developing web applications.

01:24.540 --> 01:32.870
Now I would want to also add in dev tools. Dev tools make it easy for developing application. So I’ll add tools in.

01:33.030 --> 01:37.050
And I would want to use JPA at a later point in this course.

01:37.270 --> 01:41.230
JPA and I would want to use H2 as in-memory database.

01:41.430 --> 01:44.180
Let's add it in as well.

01:44.220 --> 01:48.040
Once you do that, you can click generate project.

01:48.450 --> 01:52.590
What Spring initialiser does is it would create a Maven project.

01:52.590 --> 01:57.110
Put it in a zip and that’s what is downloaded to your downloads folder.

01:57.120 --> 02:04.110
What I recommend you to do is to unzip the zip file to some folder on your hard disk.

02:04.160 --> 02:06.570
Zip file is downloaded. You can take this,

02:06.610 --> 02:13.050
unzip the file to some folder on your local hard disk and launch up Eclipse.

02:13.110 --> 02:14.310
Once Eclipse lanches up,

02:14.460 --> 02:22.590
You can import the project by using file, import, existing Maven projects and you can browse through

02:22.650 --> 02:27.050
to the directory where you unzipped your zip file.

02:27.060 --> 02:34.080
This is the root directory to which I unzipped my zip file too and I can see a pom dot xml coming

02:34.080 --> 02:43.200
up with a RESTful web service. You can also use browse to browse through to your folder. Once I click finish

02:43.200 --> 02:43.950
button,

02:43.950 --> 02:51.850
what Maven does is, it would actually download all the dependencies which are listed in the pom dot xml.

02:52.050 --> 02:55.830
And it would also set up the entire project for us.

02:55.830 --> 02:57.950
So let's go ahead and click the finish button.

02:58.260 --> 02:59.940
This might take a little while.

02:59.940 --> 03:05.850
If this is the first time you are using this specific version of spring boot because this downloads a

03:05.850 --> 03:14.010
lot of Maven dependencies. What is happening in the background is the complete setup of our RESTful Web services

03:14.040 --> 03:15.090
projects.

03:15.120 --> 03:20.390
Once the project is set up, you’d see a folder structure like this.

03:20.400 --> 03:27.390
This is typical Maven project structure. Source main Java, source main resources, source test Java

03:27.390 --> 03:32.120
Source main Java contains all our Java code and there's not a lot in here right now.

03:32.190 --> 03:38.310
We have source main resources with the properties file so there is application dot properties which is the

03:38.310 --> 03:45.710
spring boot properties file and we have the test which can be written down in source test java.

03:45.960 --> 03:53.680
We also have a pom dot xml which contains the dependencies which we have chosen. The pom dot xml contains

03:53.690 --> 03:56.110
the dependencies starter data JPA,

03:56.250 --> 04:03.900
starter web, dev tools, H2 and starter test. These four…the first four dependencies

04:04.020 --> 04:09.450
are what we have chosen on the start dot spring dot io website. Web,

04:09.610 --> 04:11.780
dev tools, JPA and H2.

04:11.850 --> 04:15.610
That's what we chose and those were the dependencies which were in here.

04:15.870 --> 04:22.940
And by default spring boot would add in…spring initialiser would add in a dependency on spring boot

04:23.020 --> 04:23.600
starter test.

04:23.610 --> 04:27.420
This is the one to write your unit test and integration test.

04:27.460 --> 04:34.110
If you go and look at your Maven dependencies, you should see a lot of dependencies which are

04:34.110 --> 04:40.680
coming in because of this starters we are using. Now that we have an overview of the project that we

04:40.800 --> 04:42.090
are looking at,

04:42.090 --> 04:52.120
let's start up the spring boot application class. Right click, run as Java application. We have not really written

04:52.360 --> 04:54.300
any code as of now.

04:54.640 --> 04:55.590
But that's fine.

04:55.630 --> 04:57.820
We will write a lot of code in the next steps.

04:57.820 --> 05:04.150
For now, what we wanted to check is if the application is launching up fine. If the application launches

05:04.150 --> 05:06.690
up fine then we are good to go.

05:06.820 --> 05:13.330
You can see that there is a lot of log being generated and you would see by the end of the thing that

05:13.340 --> 05:15.940
the Tomcat server has started up.

05:15.940 --> 05:20.220
So you can see that Tomcat has started on ports 8080.

05:20.320 --> 05:23.080
There’s a lot of magic which is happening in the background.

05:23.200 --> 05:31.480
We will uncover all that magic in the subsequent steps as we develop more and more restful services

05:32.020 --> 05:33.490
Until the next step, bye-bye
