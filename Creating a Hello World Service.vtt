WEBVTT

00:02.220 --> 00:08.620
Welcome back! In this step, we would want to create a simple controller, a REST controller which would return

00:08.830 --> 00:10.550
some hardcoded text.

00:10.570 --> 00:12.300
This is like your hello world

00:12.470 --> 00:14.390
RESTful web service.

00:14.590 --> 00:18.110
I won’t really call this a restful webservice. Let’s just call it a service

00:18.160 --> 00:20.090
that returns some text.

00:20.230 --> 00:27.100
I'm going to create a new class. Control N or command N. Type in class and I would want to create a new

00:27.100 --> 00:34.000
class. I would want to call this hello world controller and click finish. What we want to do in this

00:34.130 --> 00:39.800
hello world controller is, I would want to create a method and I would want this method to return.

00:40.000 --> 00:40.870
Hello world.

00:41.020 --> 00:44.340
That's what we would want to do. Whenever we create REST service,

00:44.360 --> 00:46.810
we would need to define two things, right?

00:46.810 --> 00:53.750
One is what method? I would want to use get method and I would want to use

00:53.800 --> 00:54.970
a URI.

00:55.060 --> 01:00.370
What URI do we want to use?  I want to use the URI, slash Hello world.

01:00.370 --> 01:08.770
So if somebody goes into their browser and sends a GET request to slash hello world I would want to send

01:08.770 --> 01:10.270
him some text.

01:10.300 --> 01:14.190
That's basically all that I would want to do in this step.

01:14.230 --> 01:20.890
One of the first things that we would need to do is to tell spring that this is a controller with.

01:20.890 --> 01:26.200
So this is a controller in the sense that this would be handling HTTP requests.

01:26.250 --> 01:28.450
So we need to tell Spring that this is a controller.

01:28.600 --> 01:31.580
And next we’d need to create a method.

01:31.870 --> 01:35.130
So the method would be let's say public.

01:35.260 --> 01:42.280
It's returning a string hello world so I'll call it string and let's call it hello world.

01:42.280 --> 01:44.340
What should this method do.

01:44.350 --> 01:44.840
Simple right.

01:44.860 --> 01:46.740
We would want to return this string back.

01:46.750 --> 01:52.060
So I would do that return the string back. To this method,

01:52.090 --> 01:56.630
I need to map a GET request to be the URI

01:56.770 --> 01:58.030
hello world.

01:58.030 --> 01:58.530
There are two things

01:58.530 --> 01:59.400
now we have to do.

01:59.460 --> 02:04.720
One is to call this a controller. So we need to say this is a controller and then we would need to map

02:04.830 --> 02:08.090
a get URI of slash hello world to this.

02:08.170 --> 02:08.900
How do we do that?

02:08.920 --> 02:11.710
Let's focus on the controller first.

02:11.820 --> 02:19.650
If you'd want to tell Spring MVC that this is going to handle REST requests, how do we do that?

02:19.840 --> 02:26.920
We would do that is by using something called Rest controller. So, at rest controller.

02:26.920 --> 02:32.370
Now this becomes a controller which can handle rest requests.

02:32.500 --> 02:36.100
The next thing is to create a mapping for

02:36.100 --> 02:40.390
this method. I would want to map a GET request to this

02:40.430 --> 02:41.530
URI.

02:41.770 --> 02:46.700
One of the ways of doing that is to create a request mapping.

02:46.900 --> 02:53.320
So I type @ request mapping. This is an annotation. I’ll import the annotation. I pressed control one and imported

02:53.320 --> 02:53.970
it in.

02:54.070 --> 03:01.960
And here, I can define what is the request method. Request method that we want to use is…request method

03:02.080 --> 03:11.050
dot get. So the method we want to use is GET and the URI..how do we map the URI? That’s

03:11.080 --> 03:18.750
by using the path. Path is equal to slash hello world. That’s it!

03:19.520 --> 03:21.650
It's as simple as this.

03:21.660 --> 03:24.040
Now let's start our RESTful webservices

03:24.170 --> 03:28.800
application. When I type in localhost 8080 slash

03:29.060 --> 03:30.030
hello world.

03:30.080 --> 03:31.860
You’d see Hello world

03:31.940 --> 03:34.130
displayed on the browser.

03:34.650 --> 03:42.090
What we have done until now is we put up a very simple annotation at rest controller and then we mapped get requests

03:42.090 --> 03:48.740
to this URI to this method. And whatever text which is returned by this particular method

03:48.920 --> 03:53.630
it's displayed on the browser. So we can improve this further.

03:53.690 --> 03:59.340
Instead of using at request mapping, there's an another annotation called Get mapping.

03:59.420 --> 04:06.650
So I can say get mapping, import get mapping and now I don't need to specify the method is equal to request

04:06.660 --> 04:07.430
method

04:07.550 --> 04:12.610
dot get. So I can say get mapping path is equal to hello world. Similar to this,

04:12.740 --> 04:18.770
there would be other mappings like post mapping, put mapping and other mappings that we would use in

04:18.770 --> 04:20.680
the subsequent steps.

04:20.680 --> 04:27.230
I like the at get mapping annotation because it's quite short and it's very easy to read as well.

04:27.470 --> 04:29.870
So, I’m mapping a get request to

04:29.930 --> 04:30.860
hello world.

04:30.860 --> 04:33.140
Isn't that a cool thing?

04:33.170 --> 04:36.460
I'll organize my imports. Control shift O.

04:36.800 --> 04:44.540
And let's restart and you’d see that the service would continue working. In this brief step,

04:44.630 --> 04:49.040
we created a simple hello world request.
