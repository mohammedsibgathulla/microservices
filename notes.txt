1. What Is A Web Service?
- Software System designed to support interoperable machine-to-machine interaction over network.
- Designed for machine-to-machine or applicaion-to-application interaction.
- Should be interoperable (Any other kind of application should be able to talk to the application) - Not platform independent. Irrespective of technologies they should be able to talk to the webservice.
- It should allow communication over a network.

2. How Questions Related To Web Services
- How does data exchange between applications take place?
	It happens with Request & Response. They are the basic concepts behind webservices.
- How can we make web services platform independent?
	Request & Response should be platform indepndent.
	Two popular formats - XML
						- JSON
- How does Application A know the format of Request & Response?
	Service Definition: Every web service offers a Service Definition. 
	It specifies the following
		1. The Request/Respons Format.
		2. Request Structure.
		3. Response Structure.
		4. Endpoint. (How to call the service.)

3. Web Services - Key Terminology
 - Service Provider or Server - Which host the web service
 - Service Consumer or Client - Which consumes the web service
 - Service Definition - It is the contract b/n the service provider and the service consumer.
 - Transport: It defines how a service is called is it exposed over internet or is exposed over MQ.
 	It has two formats
 			1. HTTP - over the web.
 			2. MQ	- Communication over a queue.	

4. Web Service Groups
- SOAP - based :
- REST - styled :  	
- SOAP & REST are not really comparable. 
- REST defines ann architectural approach. Whereas SOAP poses restrictions on the format of XML which is exchanged between your service provider and the service consumer.
- SOAP stands for Simple Object Access Protocol. Actually it no longer stands for Simple Object Access Protocol. It's no longer an abbreviation anymore. SOAP is just like a request response. Any of those terms. SOAP is just a term. SOAP defines a specific way of building web services. In SOAP we use XML as the request exchange format.		

5. Introductions To RESTFUL Web Services
- REST stands for representational state transfer. Itâ€™s a term which is Coined by Roy Fielding. If you remember, Roy Fielding is the guy who also developed HTTP protocol.
- RESTful web services try to define services using the different concepts that are already present in HTTP. The most important abstraction in the REST is something called a resource. A resource is anything that you'd want to expose to the outside world through your application.

6. SOAP vs RESTFUl Web Services
- In SOAP the data exchange format is always XML that too specifically the SOAP XML with SOAP envelope header and body. Both your request and response should adhere to the SOAP Structure.
- In REST there is no strict date exchange format. You can exchange a XML, a JSON or any other format you would want use.
- As far as the service definitions are concerned SOAP uses WSDL. Web service definition language. REST does not have a standard definition language.
- As far as the transport protocol is concerned SOAP does not pose any restrictions at all. You can use web that is HTTP or you can use MQ. REST is very specific about making the best use of HTTP protocol. RESTful services are typically more easier to implement than SOAP.
- RESTful services are typically based on JSON which is an easy format to pass and do things with it and also with RESTful services. We don't really need to mandate really define a service definition. But with SOAP you have to define WSDL and there are a lot of complexities associated with parsing your XMLs as well.

7. Initializing A RESTful Services Project With Spring Boot
- Choose web, devtools, h2 & jpa in spring initializer and generate the project. 

8. Understanding the RESTful Services We Would Create 
- See the image.

9. Creating A HelloWorld Service
- See the project.

10. Enhancing The Hello World Service To Return A Bean
- See the project.

11. Quick Review of Spring Boot Auto Configuration And Dispatcher Servlet
- Refer .vtt file & image.

12. Enhancing The Hello World Service with A Path Variable
- See the project.

13. Creating User Bean And User Service
- See the project. 

14. Implementing GET Methods for User Resource
- See the project.

15. Implementing POST Method To create User Resource
- 

