1. What Is A Web Service?
- Software System designed to support interoperable machine-to-machine interaction over network.
- Designed for machine-to-machine or applicaion-to-application interaction.
- Should be interoperable (Any other kind of application should be able to talk to the application) - Not platform independent. Irrespective of technologies they should be able to talk to the webservice.
- It should allow communication over a network.

2. How Questions Related To Web Services
- How does data exchange between applications take place?
	It happens with Request & Response. They are the basic concepts behind webservices.
- How can we make web services platform independent?
	Request & Response should be platform indepndent.
	Two popular formats - XML
						- JSON
- How does Application A know the format of Request & Response?
	Service Definition: Every web service offers a Service Definition. 
	It specifies the following
		1. The Request/Respons Format.
		2. Request Structure.
		3. Response Structure.
		4. Endpoint. (How to call the service.)

3. Web Services - Key Terminology
 - Service Provider or Server - Which host the web service
 - Service Consumer or Client - Which consumes the web service
 - Service Definition - It is the contract b/n the service provider and the service consumer.
 - Transport: It defines how a service is called is it exposed over internet or is exposed over MQ.
 	It has two formats
 			1. HTTP - over the web.
 			2. MQ	- Communication over a queue.	

4. Web Service Groups
- SOAP - based :
- REST - styled :  	
- SOAP & REST are not really comparable. 
- REST defines ann architectural approach. Whereas SOAP poses restrictions on the format of XML which is exchanged between your service provider and the service consumer.
- SOAP stands for Simple Object Access Protocol. Actually it no longer stands for Simple Object Access Protocol. It's no longer an abbreviation anymore. SOAP is just like a request response. Any of those terms. SOAP is just a term. SOAP defines a specific way of building web services. In SOAP we use XML as the request exchange format.		

5. Introductions To RESTFUL Web Services
- REST stands for representational state transfer. It’s a term which is Coined by Roy Fielding. If you remember, Roy Fielding is the guy who also developed HTTP protocol.
- RESTful web services try to define services using the different concepts that are already present in HTTP. The most important abstraction in the REST is something called a resource. A resource is anything that you'd want to expose to the outside world through your application.

6. SOAP vs RESTFUl Web Services
- In SOAP the data exchange format is always XML that too specifically the SOAP XML with SOAP envelope header and body. Both your request and response should adhere to the SOAP Structure.
- In REST there is no strict date exchange format. You can exchange a XML, a JSON or any other format you would want use.
- As far as the service definitions are concerned SOAP uses WSDL. Web service definition language. REST does not have a standard definition language.
- As far as the transport protocol is concerned SOAP does not pose any restrictions at all. You can use web that is HTTP or you can use MQ. REST is very specific about making the best use of HTTP protocol. RESTful services are typically more easier to implement than SOAP.
- RESTful services are typically based on JSON which is an easy format to pass and do things with it and also with RESTful services. We don't really need to mandate really define a service definition. But with SOAP you have to define WSDL and there are a lot of complexities associated with parsing your XMLs as well.

7. Initializing A RESTful Services Project With Spring Boot
- Choose web, devtools, h2 & jpa in spring initializer and generate the project. 

8. Understanding the RESTful Services We Would Create 
- See the image.

9. Creating A HelloWorld Service
- See the project.

10. Enhancing The Hello World Service To Return A Bean
- See the project.

11. Quick Review of Spring Boot Auto Configuration And Dispatcher Servlet
- Refer .vtt file & image.

12. Enhancing The Hello World Service with A Path Variable
- See the project.

13. Creating User Bean And User Service
- See the project. 

14. Implementing GET Methods for User Resource
- See the project.

15. Implementing POST Method To create User Resource
- See the project.

16. Enhancing POST Method to return correct HTTP Status Code and Location
- See the project.

17. Implementing Exception Handling - 404 Resource Not Found
- See the project. 

18. Implementing Generic Exception Handling For All Resources
- See the project. 

19. Implementing DELETE Method To Delete a User Resource
- See the project. 

20. Implementing Validations for RESTful Services
- See the project.

21. Implementing HATEOAS for RESTful Services
- HATEOAS - Hyper Media As The Engine Of Application State
- In recent versions classes in the HATEOAS are update like Resource to EntityModel, ControlLinkBuilder to WebMvcLinkBuilder 

22. Internationalization For RESTful Services
- We have to configure the LocaleResolver & ResourceBundleMessageSource
- Default Locale: Locale.US
- See the project.

23. Internationalization For RESTful Services Part II
- Here we have used AcceptHeaderLocaleResolver instead of SessionLocaleResolver. We have removed ResourceBundleMessageSource and directly configured in application.properties file. This is the more best way to configure internalization.

24. Content Negotiation - Implementing Support For XML
- We use Accept in the header and try to access applicaton/json it will get the values but for application/xml the status is 406 Not Acceptable.	
- By adding the jackson-dataformat-xml dependency we can get the data in the xml format.

25. Monitoring APIs With Spring Boot Actuator
- In microservice architecture it is very important to create monitoring around your api's. 
- Acutator provides a lot of monitoring around your services. We need to use the hal browser dependincies also.
- localhost:8080/actuator or localhost:8080/application
- After defining management.endpoints.web.exposure.include=* in application.properties you will get lot of urls that you can use.
- In localhost:8080 you will get the hal browser.
- We can use hal browser to browse through the actuator. Enter /acutator and then Go.
- auditevents show the users authenticated and the users failed.
- beans show all the spring beans configured.
- conditions - Autoconfiguration
- In metrics you can see the metrics 
- httptraces - shows all the request that were executed. You cannot enable in production as it will have performance issues.
- mappings - shows all the different things that are mapped.

26. Implementing Static Filtering For RESTful Service
- You don't want to send password field in you response. You want to filer out a field. In that case we go for filtering.
- We can use @JsonIgnore to filter a field out or we can use @JsonIgnoreProperties(value={"field1", "field2"}).

27. Implementing Dynamic Filtering For RESTful Service
- With dynamic filtering we cannot configure filtering directly on the bean.

28. Versioning RESTful Services - Basic Approach with URIs
- See the project.

29. Versioning RESTful Services - Header And Content Negotiation Approach
- We use the uri localhost:8080/person/param?version=2 in postman using RequestParam
- To test versioning using Header Versioning us need to add the X-API-VERSION in the key in headers in postman and 1 / 2 as value
- To versioning using produces which is also called Content Negotiation or Accept Versioning in headers in key enter Accept and for value use application/vnd.company.app-v1+json / v2

- Media Type Versioning (a.k.a "content negotiation" or "accept header")
	- Github
- (Custom) Headers Versioning
	- Microsoft

- URI Versioning
	- Twitter
- Request Parameter Versioning
	- Amazon
- Factors 
	- URI Pollution
	  - If you look at the URI versioning and the Request Paramter versioning, we are actually polluting the URI space. So we are   actually creating new URIs or creating new request parameters as part of the URIs. 

	- Misuse of HTTP Headers
	  - Whereas in Media Type Versioning & Headers Versioning we are actually not polluting the URI space at all. These two do, what is called misuse of HTTP headers. HTTP header were never intended for versioning. 

	- Caching
	  - Media Type Versioning & Headers Versioning these two approaches use headers to differentiate between the requests, the caching can never come into picture because I cannot cache requests because they have the same URI. I would also need to look at the headers and do complicated things like that. So caching becomes very difficult here. But in these two options URI versioning and request paramter versioning I can still cache them because the version is part of the URI. 

	- Can we execute the request on the browser?
	  - What we did was, we executed all the requests using REST service client Postman. But think about a end user of your application. Probably most of them would be using a browser. So will they be able to execute the requests on the browser. For these two, No. For the media type versioning and custom header versioning. You cannot execute them on the normal browser. You have to actually have some kind of a plugin and the user has to have some kind of technical knowledge to be able to configure a HTTP header, HTTP request header and send the request out. But if you are using URL versioning or request parameter versioning, even a normal user would be able to fire a request very easily. I mean …I’m obviously talking about just the request to retrieve the data. As far as the request to..let’s say create something or update something, you would anyway need to send the body and that would definitely need a little bit of technical knowledge.

	- API Documentation
	  - You need to ensure that whatever thing that you are using is documented very well so your consumers know how to send the versioning input to your service. So you need to document that. And with the URI versioning and the Request Parameter versioning the documentation is a little easy because you can directly generate it out of code. But with the others it might be a little difficult to generate documentation out of code.

- No Perfect Solution: The important thing to realize is there is no perfect solution. It means there is no solution which would fit everybody.

- The recommended thing you to do is when you are starting building your APIs, finalize your versioning. So before you build your first API, have your versioning strategy really. Build a few examples of it, test them, make sure they are all working for your needs. That's the best you can do.

30. Implementing Basic Authentication With Spring Security
- Basic Authentication: Here you send userId and password as part of your request. Only when you provide those userId and password you would be able to access the resource.
- Digest Authenticatoin: Here the password digest is created and the digest is sent accross the actual password is not sent to the server.
- OAuth or OAuth2 Auhenticatoin: 
We will implement the basic authentication. For this add the spring security dependency. Once you restart the project you can see Using default security password printed in the console. Now when you fire the request in the postman you will get unauthrized error. In Auth of postman select BasicAuth and enter the default username as user and the password copied from log. Now once you hit you will get the response. Every time you start the password changes hence you can configure it in the application.properties file as 

spring.security.user.name=username
spring.security.user.password=password

31. Creating User Entity And Some Test Data
- uri: localhost:8080/h2-console - To go to h2 console.
- You have to just write the sql quries in data.sql file automatically the data inserted in the table by spring boot.

32. Updating GET Methods On User Resource to use JPA
- See the project.

33. Updating POST And DELETE Methods On User Resource To Use JPA
- See the project.

34. Creating Post Entity And Many To One Relationship With User Entity
- See the project.

35. Implementing A GET Service To Retrieve All Posts Of A User
- See the project. 

36. Implementing A POST Service To Create A Post For A User
- See the project.

40. Richardson Maturity Model
- See the .vtt file.

41. RESTful Web Services - Best Practices
- See the .vtt file.

42. Introduction To Microservices
- Small autonomous services that work together.
- Mircroservices are services which are exposed by rest have small well chosen deployable units these units should be cloud enabled.

43. Challenges With Microservices
- Deciding what is the right bound to microservices.
- Problem of configuration management.
- Dynamic scale up and scale down (Dynamic Load balancing).
- How to identify the bug & monitoring.
- Fault tolerance in microservices.

44. Introduction To Spring Cloud
- Configuration Management - Spring Cloud Config Server.
- Dynamic Scale Up & Scale Down
  	Ribbon For Client Side Load Balancing.
  	Naming Server (Eureka)
  	Feign (Easier Rest Clients)

- Visibility & Monitoring
  	Zipkin Distributed Tracing
  	Netflix API Gateway

- Fault Tolerance
	Hystrix

44. Advantages of Microservices Architectures
- Enables to adapt new technology & process it easily.
- You can build the microservices in different technologies.
- Dynamic Scaling.


45. Microservice Components - Standardizing Ports And URL	
- See the image.
- Use the url https://github.com/in28minutes/spring-microservices/tree/master/03.microservices

46. Intro To Limits Microservice and Spring Cloud Config Server
- Multiple microservices with mulitple environments like QA, Prod etc.
- Spring Cloud Config Server say to put configuration in Git.
- Spring Cloud Config Server act as centralized microservice configuration application.

47. Setting Up Limits Microservice
- See the project. 

48. Creating A Hard Coded Limits Service
- See the project. 

49. Enhance Limits Service To Get Configuration From application properties
- You can read the values from applicatoin.properties file using the @Value annontation. But using spring boot there is a better way we can do. We can use ConfigurationProperties.
- See the project. 

50. Setting Up Spring Cloud Config Server
- See the project. 

51. Installing Git
- Refer the image.

52. Creating Local Git Repository
- Right Click -> Build Path -> Link Source
- Browse to the git-local-config-repo & then Finish.
- Create limits-service.properties on the linked folder.
- Go to git-local-config-repo path and add the file and commit it.

53. Connecting Spring Cloud Config Server To Local Git Repository
- Right Click on git-localconfig-repo and copy the location.
- In the application properties of spring-cloud-config-server update as follows
- spring.cloud.config.server.git.uri=/home/mohammed/ranga/git-localconfig-repo
- You can also give the url of the git repository which is present externally as well.
- Hence we are using locally we need to append file:// infront of the location.
- If you run you will get an error on url http://localhost:8888/limits-service/default as white lable error page.
- Hence when ever you run a spring-cloud-config-server we should enable it by @EnableConfigServer in the main file.
- We have establish the connection between the spring cloud config server and the git repository. One of the important things about a spring cloud config server.
- One of the important things about a spring cloud config server. It's stored configuration for multiple services so I can store configuration for limits service currency exchange service and currency calculations service.
- And also it can store configurations for each of these services for different environments for example the limits service let's say it has four environments Dev QA stage and production we can store all the configurations related to all those for environments using this spring cloud config server.

54. Configuration For Multiple Environments In Git Repository
- For configuring QA, Dev, Prod env differently we will use the limit-service.properties and override it as follows
	limit-service-dev.properties
	limit-service-qa.properties
- You can comment the maximum or minimum in any environment. It will take the values from limit-service.properties which is default.
- Every time you do some changes in the git-locaconfig-repo you have to commit the changes.
- Now you can access different profiles using 
	http://localhost:8888/limits-service/qa
	http://localhost:8888/limits-service/dev
	http://localhost:8888/limits-service/default

55. Connect Limits Service To Spring Cloud Config Server	
- Rename the application.properties to bootstrap.properties in limit-service project.
- We won't configure values there. Bcoz all the configuration of values happen on spring-cloud-config server.
- In bootstrap properties are configuration of the what is the name of application and url to talk to spring-cloud-config-server.
- Now start the limit-service application it will have the following in console
  Could not locate PropertySource: I/O error on GET request for "http://localhost:8888/limits-service/default": Connection refused (Connection refused); nested exception is java.net.ConnectException: Connection refused (Connection refused)
2020-07-10 12:32:03.875  INFO 3811 --- [  restartedMain] c.a.l.LimitsServiceApplication           : No active profile set, falling back to default profiles: default
- We have not set the active profile hence it will choose the default profile.
- Now if you execute http://localhost:8080/limits then you will see the values loaded from spring-cloud-config-server for the rest  controller method in LimitsConfigurationController.

56. Configuring Profiles For Limits Service
- Update the code in boostrap.properties in limit service app.
- #You can configure through vm arguments or java application arguments
  spring.profiles.active=dev
- Unless you commit the changes the values will not be reflected in git-localconfig-repo

55. A Review Of Spring Cloud Config Server
- Spring Cloud Config Server is used to manage all the configurations related to multiple microservices.

56. Introduction To Currency Conversion and Currency Exchange Microservice
- Setting up two microservices and making to commnunicate with each other.
- Once service give the current INR value.
- The other service takes the INR value and multiply with Dollars to give the total INR of the Dollars.

57. Setting Up Currency Exchange Microservice
- Setup the project using the dependencies as shown in the image.

58. Create A Simple Hard Coded Currency Exchange Service
- We have created and exposed the rest service here.
- http://localhost:8000/currency-exchange/from/USD/to/INR
- Refer the image.

59. Setting Up Dynamic Port In The Response
- Right now we have one instance running on 8000 but at a later point in then what we'll do is we'll run one instance on 8000 another instance on eight thousand one and eight thousand two and so on. And we would want the currency calculation  service to be talking to all these three instances and we would want to be able to determine which instance of the currency exchange service that the currency calculation service is talking to. And to be able to determine that what we'll do is we'll use the port as a distinguishing factor.

- We will return port back but its not a good practice. But for learning we proceed.
- You can run the instance on many ports by using the Runconfigurations in the eclipse.
- Right click the CurrencyExchangeServiceApplication and select Duplicate & Give new name.
- Select the Arguments tab.
- In VM Arguments field enter -Dserver.port=8001
- What ever we write here will override the application.properties file.
- Hence now you can run the application on both the ports.
- http://localhost:8000/currency-exchange/from/USD/to/INR
- http://localhost:8001/currency-exchange/from/USD/to/INR

60. Configure JPA And Initialized Data
- The reponse should come from database or external MQ service but we have hardcoded previously.
- See the h2 console at http://localhost:8000/h2-console/
- Hence here we have setup inmemory database.

61. Create A JPA Repository
- You can check http://localhost:8000/currency-exchange/from/EUR/to/INR
- http://localhost:8000/currency-exchange/from/USD/to/INR

62. Setting Up Currency Conversion Microservice
- We have generated the project with same depedencies as of currency-exchange and write the below lines in application.properties
- spring.application.name=currency-conversion-service
- spring.server.port=8100

63. Creating A Service For Currency Conversion
- Create CurrencyConversionBean, CurrencyConversionController and 
	@GetMapping("/currency-converter/from/{from}/to/{to}/quantity/{quantity}")
	public CurrencyConversionBean convertCurrency(@PathVariable String from, @PathVariable String to, @PathVariable BigDecimal quantity) {
		return new CurrencyConversionBean(1L, from, to, BigDecimal.ONE, quantity, quantity,0);
	}
- Check the service at http://localhost:8100/currency-converter/from/USD/to/INR/quantity/1000

64. Invoking Currency Exchange Microservice From Currency Conversion Micro
- To invoke the service we use RestTemplate.
- We are invoking the url http://localhost:8000/currency-exchange/from/{from}/to/{to} of CurrencyExchangeService inside RestTemplate and getting the result.
- Here we are communicating to CurrencyExchangeService from CurrencyConversionService and printing the output.
- Refer the image.

65. Using Feign REST Client For Service Invocation
- There is a lot of code to call other micro service. 
- Hence the code to be simpler to invoke other microservices we use Feign.
- Feign provides integration with Ribbon which is a client side load balancing framework. 
- For feign we need to add the dependency.
- Justl like we use repository to talk to JPA we need proxy to be able to talk to external microservice.
- Copy the name from the service which you want to talk to from applicatoin.properties like for currency-exchange-service whic is as follows
@FeignClient(name = "currency-exchange-service", url = "localhost:8000")
public interface CurrencyExchangeServiceProxy {
	@GetMapping("/currency-exchange/from/{from}/to/{to}")
	public CurrencyConversionBean retrieveExchangeValue(@PathVariable String from, @PathVariable String to);
}

- Imagine the currency-exchange-service is offering 15 services all the details of how to talk to service would be present in one place.
All the rest of the application need not know that currency-exchange-service is a restful service.

66. Setting Up Client Side Load Balancing With Ribbon
- currency-conversion-service: It has just 1 instance in production.
- currency-exchange-service: It has 4 different instances in production. 
- Currently we are hardcoding the uri of the instance in the proxy @FeignClient(name = "currency-exchange-service", url = "localhost:8000")
- We can move this form hardcoding to properties file but one instance of currency-conversion-service can only talk to one instance of 
currency-exchange-service
- But if we want to make it to talk to all the instance then Ribbon comes into picture.
- Ribbon can make use of the Feign configuration and help us distribute the calls between different instances of the  currency-exchange-service.  
- Hence we will enable Ribbon on currency-conversion-service.
- We need to add the dependency 
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
		</dependency>
- we configure the load in proxy file & application properties file using ribbon as follows
proxy file:
//@FeignClient(name = "currency-exchange-service", url = "localhost:8000")
@FeignClient(name = "currency-exchange-service")
@RibbonClient(name="currency-exchange-service")

application.properties: 
currency-exchange-service.ribbon.listOfServers=http://localhost:8000,http://localhost:8001	

67. Running Client Side Load Balancing With Ribbon	
- Start http://localhost:8000/currency-exchange/from/EUR/to/INR
- Start http://localhost:80001currency-exchange/from/EUR/to/INR
- http://localhost:8100/currency-converter-feign/from/AUD/to/INR/quantity/
- When you run the above url multiple times you can see the load distributed between 8000 & 8001

68. Understand The Need For A Naming Server
- Every time we add a an instance we need to configure it in the properties file like 
currency-exchange-service.ribbon.listOfServers=http://localhost:8000,http://localhost:8001,http://localhost:8002
- But it should be done dynamically we can't add everytime. As the load increases it should be able to do scaleup & down automatically.
- Hence Ribbon will not be able to distribute the load to a new server unless we specify.
- In order to solve this problem we use Nameservers.
- If the currency exchange service is running on a URL  xyz you don't want to hardcoded on the currency calculation service because there might be a new instance of the currency exchange service coming up or the existing instance might be going down and things like that rather than that we have something called namings server.

- All the instances of all micro services would register with the naming server. Whenever an instance of a micro service comes up it would register itself Eureka naming service this is called Service registration.

- And whenever a service wants to talk to another service let's say the currency calculation Service wants to talk to the currency exchange service what would it do. It would talk to the name server and it would ask the name server what are the instances of the currency exchange service that are currently running. This is called Service discovery.

- So the currency calculation Service is asking for the location of the currency exchange service the instances of currency exchange service that is called service discovery.

- The two important features of the naming server are service registration and service discovery at startup of every application they would register with the naming server and whenever they want details of another micro service they would a service discovery they'll say I want the details of service X Y Z.

69. Setting Up Eureka Naming Server
- Setup the Eureka namig server project with dependencies as shown in the image.

70. Connecting Currency Conversion Microservice To Eureka
- Open the pom.xml of Currency Conversion Microservice and add the dependency & @EnableDiscoveryClient in its main class.
- Configure the url for eureka in application properties as eureka.client.service-url.default-zone=http://localhost:8761/eureka
- Once you run the applicatoin you can see the instances in Eureka server.

71. Connecting Currency Exchange Microservice To Eureka
- Do same as above.
- Copy the dependency 
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
- Do the same for limits-service	

72. Distributing Calls Using Eureka And Ribbon	
- Now we want to make currency conversion service talk to exchange service for this we will comment the line -> currency-exchange-service.ribbon.listOfServers=http://localhost:8000,http://localhost:8001 in applcation.propreties and restart all one by one.
- Now hit the url http://localhost:8000/currency-exchange/from/EUR/to/INR
- Now hit http://localhost:8100/currency-converter-feign/from/EUR/to/INR/quantity/1000
- You can up one more instance then you can see that the load will be distributed.

73. A Review Of Implementing Eureka, Ribbon And Feign
- See the image.

74. Introduction To API Gateways
- See the image & .vtt file.

75. Setting Up Zuul API Gateway
- Generate the project with depedencies in the image.
- Add the @EnableZuulProxy
		  @EnableDiscoveryClient 
		  in main file.
- Add 
	spring.application.name=netflix-zuul-api-gateway-server
	server.port=8765
	eureka.client.service-url.default-zone=http://localhost:8761/eureka in application.properties file.

76. Implementing Zuul Logging Filter
- If you have multiple filters so lets say you have a Zuul logging filter Zuul security filter and a lot of other filters you can set a priority order between them.
- So you can give a priority order of one for these two for the other one and three for the other one and so on.	
- You can implement security or rate limiting in zuul.

77. Executing A Request Through Zuul API Gateway
- Normally we use http://localhost:8000/currency-exchange/from/EUR/to/INR to invoke a request.
- For zuul the syntax is http://localhost:8765/{application-name}/{uri}
- Ex for the above query: http://localhost:8765/currency-exchange-service/currency-exchange/from/EUR/to/INR

78. Setting Up Zuul API Gateway Between Microservice Invocations
- We update the CurrencyExchangeServiceProxy with 
	@FeignClient(name = "netflix-zuul-api-gateway-server")

	@GetMapping("currency-exchange-service/currency-exchange/from/{from}/to/{to}")

	















